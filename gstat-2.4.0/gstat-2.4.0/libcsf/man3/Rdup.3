.lf 1 Rdup.3
.\" WARNING! THIS FILE WAS GENERATED AUTOMATICALLY BY c2man!
.\" DO NOT EDIT! CHANGES MADE TO THIS FILE WILL BE LOST!
.TH "Rdup" 3 "13 August 1999" "c2man rdup2.c"
.SH "NAME"
Rdup \- create a new map by cloning another one
.SH "SYNOPSIS"
.ft B
#include "csf.h"
.br
.sp
MAP *Rdup
.br
(
.br
	const char *toFile,
.br
	const MAP *from,
.br
	CSF_CR cellRepr,
.br
	CSF_VS dataType
.br
);
.ft R
.SH "PARAMETERS"
.TP
.B "const char *toFile"
file name of map to be created
.TP
.B "const MAP *from"
map to clone from
.TP
.B "CSF_CR cellRepr"
cell representation of new map
.sp
Possible values for a \fBCSF_CR\fR are as follows:
.IP
* preferred version 2 cell representations
.RS 0.75in
.PD 0
.ft B
.nr TL \w'CR_UNDEFINED'u+0.2i
.ft R
.TP \n(TLu
\fBCR_UINT1\fR
boolean, ldd and small nominal and small ordinal
.TP \n(TLu
\fBCR_INT4\fR
large nominal and large ordinal
.TP \n(TLu
\fBCR_REAL4\fR
single scalar and single directional
.RE
.PD
.IP
* other version 2 cell representations
.RS 0.75in
.PD 0
.ft B
.nr TL \w'CR_UNDEFINED'u+0.2i
.ft R
.TP \n(TLu
\fBCR_REAL8\fR
double scalar or directional, and also the only type that
can hold all
cell representation without loss of precision
.RE
.PD
.IP
* version 1 cell representations
these can be returned by BUT NOT passed to a csf2 function
.RS 0.75in
.PD 0
.ft B
.nr TL \w'CR_UNDEFINED'u+0.2i
.ft R
.TP \n(TLu
\fBCR_INT1\fR
.
.TP \n(TLu
\fBCR_INT2\fR
.
.TP \n(TLu
\fBCR_UINT2\fR
.
.TP \n(TLu
\fBCR_UINT4\fR
.
.RE
.PD
.IP
* this one CANNOT be returned by NOR passed to a csf2 function 
.RS 0.75in
.PD 0
.ft B
.nr TL \w'CR_UNDEFINED'u+0.2i
.ft R
.TP \n(TLu
\fBCR_UNDEFINED\fR
just some value different from the rest
.RE
.PD
.TP
.B "CSF_VS dataType"
datatype/valuescale of new map
.sp
Possible values for a \fBCSF_VS\fR are as follows:
.IP
* version 1 datatypes, 
these can be returned by BUT NOT passed to a csf2 function
.RS 0.75in
.PD 0
.ft B
.nr TL \w'VS_NOTDETERMINED'u+0.2i
.ft R
.TP \n(TLu
\fBVS_NOTDETERMINED\fR
version 1
.TP \n(TLu
\fBVS_CLASSIFIED\fR
version 1
.TP \n(TLu
\fBVS_CONTINUOUS\fR
version 1
.RE
.PD
.IP
* version 2 datatypes
these two can be returned by or passed to a csf2 function
.RS 0.75in
.PD 0
.ft B
.nr TL \w'VS_NOTDETERMINED'u+0.2i
.ft R
.TP \n(TLu
\fBVS_BOOLEAN\fR
boolean, always UINT1, values: 0,1 or MV_UINT1
.TP \n(TLu
\fBVS_NOMINAL\fR
nominal, UINT1 or INT4
.TP \n(TLu
\fBVS_ORDINAL\fR
ordinal, UINT1 or INT4
.TP \n(TLu
\fBVS_SCALAR\fR
scalar, REAL4 or (maybe) REAL8
.TP \n(TLu
\fBVS_DIRECTION\fR
directional REAL4 or (maybe) REAL8, -1 means no direction
.TP \n(TLu
\fBVS_LDD\fR
local drain direction, always UINT1, values: 1-9 or MV_UINT1
.RE
.PD
.IP
* this one CANNOT be returned by NOR passed to a csf2 function 
.RS 0.75in
.PD 0
.ft B
.nr TL \w'VS_NOTDETERMINED'u+0.2i
.ft R
.TP \n(TLu
\fBVS_UNDEFINED\fR
just some value different from the rest
.RE
.PD
.SH "DESCRIPTION"
Rdup creates a new empty map from the specifications of another map.
No cell values are copied. It uses a call to Rcreate to create the
map. See Rcreate for legal values of the args cellRepr and valueScale.
.SH "RETURNS"
the map handle of the newly created map or NULL in case of an
error
.SH "MERRNO"
NOT_RASTER plus the Merrno codes of Rcreate
.SH "EXAMPLE"
.lf 1 examples/dupbool.tr
.DS
 #include "csf.h"
 
 /* make a boolean map 
  * with minimal checking
  */
 
 void main(int argc, char *argv[] )
 {
 
   REAL8 inValue;
   UINT1 outValue;
   MAP *in, *out;                      
   size_t r,c;
 
   if (argc != 2)
   {
    fprintf(stderr,"%s: no file specified\\n",argv[0]);
    exit(1);
   }
 
   in = Mopen(argv[1], M_READ);
   if (in == NULL)  
   {  
      Mperror(argv[1]);
      exit(1);
   }
   RuseAs(in, CR_REAL8); 
   out = Rdup(argv[2], in, CR_UINT1, VS_BOOLEAN);
   if (out == NULL)  
   {  
      Mperror(argv[2]);
      exit(1);
   }
 
   for(r=0; r < RgetNrRows(in); r++)
    for(c=0; c < RgetNrCols(in); c++)
    {
     RgetCell(in,r,c,&inValue); 
     if (IS_MV_REAL4(&inValue))
      outValue = MV_UINT1;
     else
      outValue = inValue > 0;
     RputCell(out,r,c,&outValue); 
    }
 
   Mclose(in);
   Mclose(out);
 
   exit(0);
 }
 
.DE
.lf 178 Rdup.3
