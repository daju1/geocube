.lf 1 Rmalloc.3
.\" WARNING! THIS FILE WAS GENERATED AUTOMATICALLY BY c2man!
.\" DO NOT EDIT! CHANGES MADE TO THIS FILE WILL BE LOST!
.TH "Rmalloc" 3 "13 August 1999" "c2man rmalloc.c"
.SH "NAME"
Rmalloc \- allocate dynamic memory large enough to hold in-file and app cells
.SH "SYNOPSIS"
.ft B
#include "csf.h"
.br
.sp
void *Rmalloc
.br
(
.br
	const MAP *m,
.br
	size_t nrOfCells
.br
);
.ft R
.SH "PARAMETERS"
.TP
.B "const MAP *m"
map handle
.TP
.B "size_t nrOfCells"
number of cells allocated memory must hold
.SH "DESCRIPTION"
Rmalloc allocates memory to hold  nrOfCells
cells in both the in-file and app cell representation. Allocation
is done by malloc for other users. Our own (utrecht university) applications
calls ChkMalloc. Freeing memory allocated by Rmalloc is done by free (or Free).
.SH "RETURNS"
a pointer the allocated memory or
NULL
if the request fails
.SH "NOTE"
Note that a possible RuseAs call must be done BEFORE Rmalloc.
.SH "EXAMPLE"
.lf 1 examples/_row.tr
.DS
 
 #include <stdlib.h>
 #include "csf.h"
 
 /* process a raster per row
  * minimal checking
  */
 
 extern void DoThatWithRow(REAL4 *, size_t );
 
 void main(int argc, char *argv[] )
 {
 
   REAL4 *buf;
   MAP *map;                      
   size_t r;
   size_t nrOfCells;
 
   if (argc != 2)
   {
    fprintf(stderr,"%s: no file specified\\n",argv[0]);
    exit(1);
   }
 
   map = Mopen(argv[1], M_READ_WRITE);
   if (map == NULL)  
   {  
      Mperror(argv[1]);
      exit(1);
   }
 
   nrOfCells = RgetNrCols(map); 
 
   (void)RuseAs(map, CR_REAL4); 
 
   buf = (REAL4 *)Rmalloc(map, nrOfCells);
 
   for(r=0; r < RgetNrRows(map); r++ )
   {
     RgetRow(map, r, buf); 
     DoThatWithRow(buf, nrOfCells);
     RputRow(map,r, buf); 
   }
 
   Mclose(map);
   free(buf);
 
   exit(0);
 }
 
.DE
.lf 41 Rmalloc.3
