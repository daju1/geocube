@Section
 @Title { Technical issues }
@Begin

@DP
@I{Portability}
@LP
Gstat is written with portability to different computer platforms in
mind. Source code of gstat and libraries used should be easily portable
to 32 or 64 bits computer platforms with an @S ansi-c compiler.  The
general-purpose device-independent graphical plotting program gnuplot,
used for plotting variograms, is also written in @S ansi-c and is ported
to most computer platforms.  Binary grid map files are handled portably
between big endian (e.g. Motorola 680x0, HP-PA) and little endian (e.g.
INTEL 80x86) machines---the files are either written to their native
format (e.g. the little endian format for binary Idrisi files) or the
file format documents the endianness (e.g. PCRaster or Arc-Info
gridfloat). It should be noted that apart from gnuplot, gstat comprises
only a single binary. Distributing gstat and gnuplot binaries for
several platforms on the internet would make recompilation obsolete. So
far, gstat has been ported to AIX, HP-UX, Linux, DEC-Alpha, SunOS and
MS-DOS (using virtual memory through DPMI).

@DP
@I{Precision}
@LP
Internally, data storage and floating point calculations are done in
double precision. All matrix computations, done by the matrix library
(Stewart and Leyk, 1994), use double precision (a compile switch could
change this into single precision).

@DP
@I{Command file parser}
@LP
To translate the characters in a gstat command file into internal data
structures from which the program flow can be deduced, a command file
parser was written. The command file syntax is designed in such a way
that at every moment only one token (word, quoted string, number or
symbol) has to be read, i.e. the syntax is an LALR(1) grammar (Aho et
al., 1986). The grammar was compiled into a command parser by using
yacc, and for recognizing tokens in a command the parser uses a lexical
analyzer generated by lex. Lex and yacc (Levine, Mason and Brown, 1992)
are POSIX-conforming utilities, and neither of them is required to
compile gstat (their output is portable c code).

@DP
@I{Interactive user interface}
@LP
The @S ansi-c standard has no functions for obtaining a single key press
or for screen handling (direct instead of line wise screen access). On
unix systems, the curses library does provide direct screen acces for
all terminal types, and the variogram modelling interface of gstat uses
this library. The curses library is ported to other platforms as well
(e.g. ``pdcurses'' to MS-DOS and "OS/2"). For graphical display of
sample variogram and variogram models, gnuplot, a device-independent
general-purpose plotting program is used. Gnuplot is written to serve
many computer platforms and graphic file formats (e.g. Encapsulated @S
PostScript, GIF, fig, LaTeX). From the interface, plots can be written
directly to Encapsulated @S PostScript or gif files, or else sample
variogram and gnuplot commands can be saved for manual customization of
for instance title, axis titles, key entries, symbols, line type,
colours, and graphic file format.

@PP
Ideally, variogram modelling shows the user interface and the modelled
variogram simultaneously. For this, a window system is necessary. Given
the current architecture (gstat and gnuplot being two distinct
executables), a protocol for inter-process communication is needed, as
gstat must tell gnuplot what to do. One way to handle this is using
pipes, and gstat uses the pipe mechanism of the function popen(), a
proposed POSIX standard. This function is currently implemented on unix
systems and on "OS/2". For instance, on a unix platform running the X
Window System, after using the command ``show plot'', the screen may
look like Fig. 3: the gnuplot window shows the plot of sample variogram
and variogram model because gstat opened a pipe to gnuplot and wrote the
appropriate commands for displaying the variogram plot to this pipe. In
an X Window System environment, gstat instructs the gnuplot process to
open a plot window for the variogram of each variable or variable pair,
thus enabling visual, on-screen comparison of direct and cross
variograms, or of directional variograms.

@PP
In environments that do not support the pipe mechanism (e.g. MS-DOS-like
environments) the gnuplot plotting screen replaces the character based
user interface of gstat temporarily, by using the @S ansi-c system()
function call.

@PP
It would be fairly trivial to write a graphical user interface for a
specific platform (e.g. for MS-Windows or for the X Window System) that
controls the complete functionality of gstat (i.e.  prediction and
simulation as well). This could be done either as native gstat code or
as a stand-alone application that writes command files and uses gstat as
back end. Plans for the latter option have risen in the Idrisi project.

@DP
@I{Program limits}
@LP
Gstat has no built-in limits, and practically all memory usage is
dynamic. Therefore, only the memory necessary for the problem is used,
and only available (virtual) memory limits the number of observations
per variable, the number of variables, the number of base functions for
each variable, the number of prediction locations, the number of
distance intervals for sample variogram calculation or the number of
nested variogram models per variogram. A consequence of the absence of
built-in limits is that unexperienced users may easily meet the limits
of their own patience when using gstat---attempts to calculate a
variogram of more than 10,000 points or to solve a kriging system with
more than 750 points may take quite long on medium sized systems.

@End @Section
