#pragma once
#include "./node.h"
#include "./treenode.h"

namespace geometry2D
{
	/*
–ис. 1: —в€занное двоичное дерево поиска с головным узлом. 
—в€зи ленты представлены дугами
ƒл€ краткости св€занное двоичное дерево 
поиска будем называть св€занным деревом 
поиска, а охватывающий его св€зный список Ч лентой.

—в€занное дерево поиска реализуем в виде 
класса BraidedSearchTree. Ётот класс отличаетс€ 
от класса SearchTree из описани€ двоичных деревьев 
поиска по трем существенным признакам. ¬о-первых, 
объекты класса BraidedSearchTree обладают св€зным 
списком (лентой), который дл€ каждого узла устанавливает 
ссылки на предшественника и последовател€. ¬о-вторых, 
объекты класса BraidedSearchTree поддерживают окно, 
которое в любой момент времени располагаетс€ над 
каким-либо элементом в дереве. ќкно служит той же 
цели, что и в классе List(используетс€ класс Node 
из реализации кольцевого списка): существует целый 
р€д операций с окном или с элементом в окне. ¬-третьих, 
элемент root класса BraidedSearchTree указывает на 
головной узел Ч "псевдокорневой узел", правый потомок 
которого €вл€етс€ фактическим корнем св€занного дерева поиска. 
≈сли посмотреть на ленту, то узел, содержащий наименьший 
элемент в дереве, следует за головным узлом, а узел, 
содержащий самый большой элемент, предшествует головному 
узлу. —ледовательно, головной узел соответствует головной 
позиции, котора€ располагаетс€ одновременно перед первой 
позицией и после последней (рис. 1).
 

   ласс BraidedNode 

 

 

”злы св€занного дерева поиска €вл€ютс€ объектами 
класса BraidedNode. ѕоскольку эти узлы действуют 
одновременно как узлы дерева и как узлы списка, 
то шаблон класса BraidedNode составим на основе 
классов TreeNode и Node:
*/
template<class T>
class BraidedNode : public Node, public TreeNode<T> {
 public :
  BraidedNode<T>(T);
  BraidedNode<T> (BraidedNode<T>& n);
  BraidedNode<T> *rchild(void);
  BraidedNode<T> *lchild (void);
  BraidedNode<T> *next (void);
  BraidedNode<T> *prev(void);
  friend class BraidedSearchTree<T>;
};

 

} //namespace

#include "./braidednode.cpp"
